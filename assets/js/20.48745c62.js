(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{186:function(t,s,e){"use strict";e.r(s);var a=e(0),n=Object(a.a)({},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),e("p",[t._v("在顶级作用域下，初始化变量 "),e("code",[t._v("classifyRE")]),t._v("，值为一个正则表达式。这个正则表达式使用了 g 修饰符：“"),e("a",{attrs:{href:"https://www.w3schools.com/jsref/jsref_regexp_g.asp",target:"_blank",rel:"noopener noreferrer"}},[t._v("全局匹配，而不是找到第一个匹配项后就停止"),e("OutboundLink")],1),t._v("”。以一个"),e("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-non-capturing-parentheses",target:"_blank",rel:"noopener noreferrer"}},[t._v("非捕获括号"),e("OutboundLink")],1),t._v("开头："),e("code",[t._v("(?:x)")]),t._v("。"),e("code",[t._v("classifyRE")]),t._v(" 其实也就是寻找一个输入的开始（没有捕获），或者是一个连字符，或者是一个下划线（没有捕获）："),e("code",[t._v("^|[-_]")]),t._v("。接下来是一个单词字符（ 捕获）："),e("code",[t._v("(\\w)")]),t._v("。")]),t._v(" "),e("p",[t._v("然后，定义一个函数变量 "),e("code",[t._v("classify")]),t._v("，参数是一个字符串，返回值是参数 "),e("code",[t._v("str")]),t._v(" 两次链式调用 "),e("a",{attrs:{href:"https://www.w3schools.com/jsref/jsref_replace.asp",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("replace")]),t._v(" 方法"),e("OutboundLink")],1),t._v("。")]),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),t._m(5),t._v(" "),t._m(6),t._m(7),t._v(" "),t._m(8),t._v(" "),e("p",[t._v("替换为一个大写字母，然后移除连接符和下划线。例如，“this_is-an_example” 将会替换为 “ThisIsAnExample”。")]),t._v(" "),e("p",[t._v("基于此，我们最后将回到 "),e("code",[t._v("warn")]),t._v(" 函数中，这个函数在本系列的第十一章（接着是 "),e("code",[t._v("generateComponentTrace")]),t._v(" 函数，"),e("code",[t._v("repeat")]),t._v(" "),e("code",[t._v("formatComponentName")]),t._v(" 函数，和现在的 "),e("code",[t._v("classify")]),t._v(" 函数）里学习过。"),e("a",{attrs:{href:"https://github.com/ohhoney1/Vue.js-Source-Code-line-by-line/blob/master/docs/18-the-warn-function.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("下一章"),e("OutboundLink")],1),t._v("我们将继续回到 "),e("code",[t._v("warn")]),t._v(" 函数的学习中。")])])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"classify-函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#classify-函数","aria-hidden":"true"}},[this._v("#")]),this._v(" classify 函数")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" classifyRE "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/(?:^|[-_])(\\w)/g")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("classify")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" str\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("classifyRE"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" c"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("toUpperCase")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/[-_]/g")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("p",[s("code",[this._v("replace")]),this._v(" 方法搜索指定的值，或一个字符串的正则表达式，并返回其中指定的值置换后的新字符串。")])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[t._v("在这里，第一个 "),e("code",[t._v("replace")]),t._v(" 方法再 "),e("code",[t._v("str")]),t._v(" 字符搜索，以找到符合 "),e("code",[t._v("classifyRE")]),t._v(" （正则表达式）的字符，替换它的是一个函数的返回值，参数 "),e("code",[t._v("c")]),t._v(" 是匹配到 "),e("code",[t._v("classifyRE")]),t._v(" 的字符，"),e("code",[t._v(".toUpperCase()")]),t._v(" 返回的是字符的全部大写形式。替换匹配项为这是函数的返回值。：")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("classifyRE"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" c"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("toUpperCase")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("第二个 "),s("code",[this._v("replace")]),this._v(" 方法全局搜索连字符和下划线，替换为空字符串：")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/[-_]/g")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("总结下这篇文章里我们所学习的，"),s("code",[this._v("classify")]),this._v(" 函数接收一个字符串作为参数，寻找符合下列条件的字符：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("在字符串的开头")]),this._v(" "),s("li",[this._v("在连接符 - 之后")]),this._v(" "),s("li",[this._v("或者在下划线 _ 之后")])])}],!1,null,null,null);s.default=n.exports}}]);